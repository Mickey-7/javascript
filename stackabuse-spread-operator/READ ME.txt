reference : https://stackabuse.com/spread-operator-in-javascript/

--------------------------------------------------------------------------------------------------------

Expanding Arrays
    let greet = ["hello", "world"];
    console.log(greet);
    console.log(...greet);

    // terminal output
    // C:\Users\donat\Documents\stackabuse-spread-operator>node expandingArrays
    // [ 'hello', 'world' ]
    // hello world

    let greetigns = "hello";
    let chars = [...greetigns];
    console.log(chars);
    // [ 'h', 'e', 'l', 'l', 'o' ]

--------------------------------------------------------------------------------------------------------

Combining Arrays
    let blog1Subscribers = ["billy@example.com", "sally@gmail.com"];
    let blog2Subscribers = [
    "timmy@gmail.com",
    "tammy@example.com",
    "tommy@gmail.com",
    ];

    let subscribers = [...blog1Subscribers, ...blog2Subscribers];
    console.log(subscribers);

    // terminal output
    // C:\Users\donat\Documents\stackabuse-spread-operator>node combiningArrays
    // [
    //   'billy@example.com',
    //   'sally@gmail.com',
    //   'timmy@gmail.com',
    //   'tammy@example.com',
    //   'tommy@gmail.com'
    // ]

    let arr1 = ["John", "Sofia", "Bob"];
    let arr2 = ["Julia", "Sean", "Anthony"];
    arr2.push(...arr1);
    console.log(arr2);

--------------------------------------------------------------------------------------------------------

Copying Arrays and Objects
    let arr1 = ["John", "Sofia", "Bob"];
    let arr2 = arr1;
    console.log(arr2);
    arr1.push("sally");
    console.log(arr2);

    // terminal output
    // C:\Users\donat\Documents\stackabuse-spread-operator>node copyingArraysObjects
    // [ 'John', 'Sofia', 'Bob' ]
    // [ 'John', 'Sofia', 'Bob', 'sally' ]

    let arr3 = ["John", "Sofia", "Bob"];
    let arr4 = [...arr3];
    console.log(arr4);
    arr3.push("sally");
    console.log(arr4);
    // [ 'John', 'Sofia', 'Bob' ]
    // [ 'John', 'Sofia', 'Bob' ]

    let arr5 = ["John", "Sofia", "Bob"];
    let arr6 = [...arr5, "Anthony", "Sean"];
    console.log(arr6);
    // [ 'John', 'Sofia', 'Bob', 'Anthony', 'Sean' ]

    let o1 = { a: 1, b: 2 };
    let o2 = { c: 3, d: 4, ...o1 };
    console.log(o2);
    // { c: 3, d: 4, a: 1, b: 2 }

    / We may also need to merge billing and shipping information into one:
    const billing = {
    billingContact: "0987654321",
    billingAddress: "street no 123, xyz city",
    };
    const shipping = {
    shippingContact: "123456789",
    shippingAddress: "street no 999, xyz city",
    };
    const custInfo = { ...billing, ...shipping };
    console.log(custInfo);
    // {
    //     billingContact: '0987654321',
    //     billingAddress: 'street no 123, xyz city',
    //     shippingContact: '123456789',
    //     shippingAddress: 'street no 999, xyz city'
    //   }

    // One question could be raised here.
    // What if both objects have some of the same properties.

    // In case of clashing properties, the property of the last object wins.
    // Let us see this in an example:

    const o3 = { a: 1, b: 2 };
    const o4 = { b: 3, c: 4, ...o1 };
    console.log(o4);
    // { b: 2, c: 4, a: 1 }
    // However, if we put the spread operator first:
    const o5 = { ...o1, b: 3, c: 4 };
    console.log(o5);
    // { a: 1, b: 3, c: 4 }

    // One use case of this feature could be to make default assignments:
    const userProvided = {
    name: "Bill Smith",
    email: "bill@example.com ",
    };
    const defaultValues = {
    name: "Unknown",
    address: "Alien",
    phone: null,
    email: null,
    };
    const userInfo = { ...defaultValues, ...userProvided };
    console.log(userInfo);
    // {
    //     name: 'Bill Smith',
    //     address: 'Alien',
    //     phone: null,
    //     email: 'bill@example.com '
    //   }

--------------------------------------------------------------------------------------------------------

usingMathFunctions
    JavaScript has a Math object which contains several methods to operate with a set of data, 
    i.e. a list of data.

    Let us say we want to get the maximum value from first three numbers of a list:

    let myList = [10, 23, 83, -1, 92, -33, 76, 100, 644, -633];
    let maximum = Math.max(myList[0], myList[1], myList[2]);
    console.log(maximum);

    // What if we want to get the maximum of all numbers in a list?
    // What if the list has n number of items?
    // Surely we wont want mylist[0], mylist[1]... mylist[1000].

    // The spread operator provides a cleaner solution:
    let myList1 = [10, 23, 83, -1, 92, -33, 76, 100, 644, -633];
    let maximum1 = Math.max(...myList1);
    console.log(maximum1);

    // terminal output
    // C:\Users\donat\Documents\stackabuse-spread-operator>node usingMathFunctions
    // 83
    // 644

--------------------------------------------------------------------------------------------------------

Spread Operator vs Rest Parameter

    Both the Spread Operator and Rest Parameter share the same syntax i.e. 
    the three magical dots .... But they behave exactly opposite to each other. 
    As a beginner, sometimes this may be confusing. 
    The bottom-line to understand the behavior is to understand the context in which it is being used.

    As we learned, the spread operator expands the contents of an iterable. 
    In contrast, the rest operator collects all the remaining elements into an array.

    